package machine

import (
	"encoding/json"
	"fmt"

	igntypes "github.com/coreos/ignition/config/v2_2/types"
	"github.com/pkg/errors"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
	"github.com/openshift/installer/pkg/asset/tls"
)

// Master is an asset that generates the ignition config for master nodes.
type Master struct {
	configs []*igntypes.Config
	files   []*asset.File
}

var _ asset.WritableAsset = (*Master)(nil)

// Dependencies returns the assets on which the Master asset depends.
func (a *Master) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
		&tls.RootCA{},
	}
}

// Generate generates the ignition config for the Master asset.
func (a *Master) Generate(dependencies asset.Parents) error {
	installConfig := &installconfig.InstallConfig{}
	rootCA := &tls.RootCA{}
	dependencies.Get(installConfig, rootCA)

	a.configs = make([]*igntypes.Config, installConfig.Config.MasterCount())
	for i := range a.configs {
		a.configs[i] = pointerIgnitionConfig(installConfig.Config, rootCA.Cert(), "master", fmt.Sprintf("etcd_index=%d", i))
	}

	a.files = make([]*asset.File, len(a.configs))
	for i, c := range a.configs {
		data, err := json.Marshal(c)
		if err != nil {
			return errors.Wrap(err, "failed to marshal ignition config")
		}
		a.files[i] = &asset.File{
			Filename: fmt.Sprintf("master-%d.ign", i),
			Data:     data,
		}
	}

	return nil
}

// Name returns the human-friendly name of the asset.
func (a *Master) Name() string {
	return "Master Ignition Config(s)"
}

// Files returns the files generated by the asset.
func (a *Master) Files() []*asset.File {
	return a.files
}
